# -*- coding: utf-8 -*-
"""car-price-prediction-regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14YdlV_o-4gEWTM3TPD35eul-8FGfeFI7
"""

#import
import pandas as pd  
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression

#hne chenjibou l fichier csv
data = pd.read_csv("CarPrice_Assignment.csv")

#9asemna les colonnes bech maadech tjina bel les ;
data[['car_ID','symboling','CarName','fueltype','aspiration','doornumber','carbody','drivewheel','enginelocation','wheelbase','carlength','carwidth','carheight','curbweight','enginetype','cylindernumber','enginesize','fuelsystem','boreratio','stroke','compressionratio','horsepower','peakrpm','citympg','highwaympg','price']]=data['car_ID;symboling;CarName;fueltype;aspiration;doornumber;carbody;drivewheel;enginelocation;wheelbase;carlength;carwidth;carheight;curbweight;enginetype;cylindernumber;enginesize;fuelsystem;boreratio;stroke;compressionratio;horsepower;peakrpm;citympg;highwaympg;price'].str.split(";",expand=True)

#fasakhna les colonnes elli malmoumin maa baadhhom
data=data.drop(["car_ID;symboling;CarName;fueltype;aspiration;doornumber;carbody;drivewheel;enginelocation;wheelbase;carlength;carwidth;carheight;curbweight;enginetype;cylindernumber;enginesize;fuelsystem;boreratio;stroke;compressionratio;horsepower;peakrpm;citympg;highwaympg;price"],axis=1)

#dropina les deux colonnes hedhouma khater mahomch lezmin lel modele
df = data.drop(["car_ID","CarName"], axis=1)

#3andi barcha colonnes tee categorie donc ken nestaamel ohe onehotencoder bech tji kbira barcha data w ena data li aandi expressive barcha heka aalech staamelna l encoding
def LABEL_ENCODING(x):
    label_encoder = preprocessing.LabelEncoder() 
    df[x]= label_encoder.fit_transform(df[x])
    df[x].unique()

LABEL_ENCODING("fueltype")
LABEL_ENCODING("aspiration")
LABEL_ENCODING("doornumber")
LABEL_ENCODING("carbody")
LABEL_ENCODING("drivewheel")
LABEL_ENCODING("enginelocation")
LABEL_ENCODING("enginetype")
LABEL_ENCODING("cylindernumber")
LABEL_ENCODING("fuelsystem")

#staamelt standarscaler pour la standarisation 
scaler = StandardScaler()
x_scaled = scaler.fit_transform((df.drop('price',axis = 1)))

#khdit l X_scaled houma l features elli chnekhdem bihom train
X = x_scaled
Y = df["price"]
X= pd.DataFrame(data=X,columns = df.drop(columns=['price']).columns) #dropina l price khater bech nepredectiwah howa (label teena)

#houni recherchina kifech l'inflation aandha effet aal price
vif_data=X
#7sebna l vif lkol colonne
VIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)

#fnction nahat l inflation 
def MC_remover(data):
    vif=pd.Series([variance_inflation_factor(data.values,i)for i in range(data.shape[1])],index=data.columns)
    if vif.max()>5:
        print(vif[vif == vif.max()].index[0],'has been removed')
        data = data.drop(columns=[vif[vif==vif.max()].index[0]])
        return data
    else:
        print("No multicollinearity present anymore")
        return data

#ayet lel fonction 
for i in range(10):
    vif_data=MC_remover(vif_data)

VIF=pd.Series([variance_inflation_factor(vif_data.values,i) for i in range(vif_data.shape[1])],index=vif_data.columns)

#selection tee l features
X = vif_data
Y = df['price']
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)

#aamalna regression
reg=LinearRegression(normalize =True)
#fitina
reg.fit(X_train,Y_train)

#produce a regression scoring model aala train
reg.score(X_train,Y_train)

#produce a regression scoring model aala test
reg.score(X_test , Y_test)

#predectina aala test
pred = reg.predict(X_test)

reg.intercept_

reg.coef_

#calcul tee regression score 
r2 = r2_score(Y_test , pred)

#optimisation 
model = linear_model.Lasso(alpha=0.1)
model.fit(X_train , Y_train)

model.score(X_train,Y_train)

model.score(X_test,Y_test)

model.coef_

model.intercept_

lpred = model.predict(X_test)

r = r2_score(Y_test , lpred)

#r

